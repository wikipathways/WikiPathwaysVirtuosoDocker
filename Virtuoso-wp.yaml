---

# oc process -f Virtuoso-wp.yaml | oc create -f -
# oc delete all --selector template=virtuoso-wikipathways

kind: Template
apiVersion: v1
metadata:
  name: virtuoso-wikipathways
  annotations:
    openshift.io/display-name: Virtuoso-WikiPathways
    openshift.io/provider-display-name: Maastricht University, Department of Bioinformatics - BiGCaT
    openshift.io/documentation-url: https://github.com/OpenRiskNet/home.git
    openshift.io/support-url: https://github.com/OpenRiskNet/home/issues
    iconClass: icon-openjdk
    description: >-
      This template consists of a base Virtuoso SPARQL endpoint, with configurations to allow loading with data from WikiPathways. WikiPathways is an online collaborative pathway database, of which the data is available as RDF. Having biological pathways in the semantic web allows rapid integration with data from other resources that contain information about elements present in pathways using SPARQL queries.  
    tags: Virtuoso, WikiPathways, SPARQL, RDF
labels:
  template: virtuoso-wp
  app: virtuoso-wp
  
# A message displayed on the deployment console on completion...
message: >-
  Virtuoso-WikiPathways has been deployed to your project.
  To remove the deployment you can use the command-line and run "oc delete all --selector template=virtuoso-wikipathways" for the project you deployed to.
  
parameters:

- name: IMAGE_TAG
  description: >-
    The Virtuoso base image tag
  value: latest

- name: ROUTES_BASENAME
  description: >-
    The base name of the service endpoint.
    This is typically the PROD or DEV URL basename.
  value: prod.openrisknet.org
  
- name: VIRTUOSO_PORT
  description: >-
    The HTTP port for the Virtuoso service
  value: "8890"

- name: ISQL_PORT
  description: >-
    The HTTP port for the ISQL
  value: "1111"

# -----------------------------------------------------------------------------
# Virtuoso-aopwiki
# -----------------------------------------------------------------------------

objects: 

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: virtuoso-wp
  spec:
    replicas: 1
    selector:
      name: virtuoso-wp
    template:
      metadata:
        labels:
          name: virtuoso-wp
      spec:
        containers:
        - image: openlink/virtuoso-opensource-7:${IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          name: virtuoso-wp
          ports:
          - containerPort: 8890
          - containerPort: 1111
          volumeMounts:
            - name: "wpdata"
              mountPath: "/wpdata"
              
        volumes:
        - name: "wpdata"
          persistentVolumeClaim:
            claimName: wp-target-claim

- kind: Service
  apiVersion: v1
  metadata:
    name: virtuoso-wp
  spec:
    ports:
    - name: virtuoso-wp
      port: ${VIRTUOSO_PORT}
      targetPort: 8890
    selector:
      name: virtuoso-wp

- kind: Service
  apiVersion: v1
  metadata:
    name: virtuoso-wp-isql
  spec:
    ports:
    - name: virtuoso-wp-isql
      port: ${ISQL_PORT}
      targetPort: 1111
    selector:
      name: virtuoso-wp-isql


- kind: Route
  apiVersion: v1
  metadata:
    name: virtuoso-wp-isql
    annotations:
      # Note: Set to false to avoid exhausting certificate generation request quota.
      # Change this to true when you are ready for secure the route with TLS.
      kubernetes.io/tls-acme: 'false'
  spec:
    host: wp.${ROUTES_BASENAME}
    to:
      kind: Service
      name: virtuoso-wp-isql

- kind: Route
  apiVersion: v1
  metadata:
    name: virtuoso-wp
    annotations:
      # Note: Set to false to avoid exhausting certificate generation request quota.
      # Change this to true when you are ready for secure the route with TLS.
      kubernetes.io/tls-acme: 'false'
  spec:
    host: wikipathways.${ROUTES_BASENAME}
    path: /sparql/
    to:
      kind: Service
      name: virtuoso-wp
